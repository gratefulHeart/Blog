{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{359:function(e,n,t){\"use strict\";t.r(n);var i=t(42),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"p\",[e._v(\"iOS启动速度优化，APP启动大体分为两个阶段：pre_main和post_man 具体参考APP启动速度优化,本篇主要讨论一种 优化pre_main函数调用延后的方案。\\n项目中哪些方法会在pre_main执行\")]),e._v(\" \"),t(\"p\",[e._v(\"All +load methods\\nAll C++ static initializers\\nAll C/C++ attribute(constructor) functions\\n上述pre_main调用方法使用场景\")]),e._v(\" \"),t(\"p\",[e._v(\"路由注册 +load处理\\n一些三方库（C/C++）初始化\\nMethod Swizzing方法交叉处理\\n发现了一些问题\")]),e._v(\" \"),t(\"p\",[e._v(\"单个的+load方法耗时1~3ms（粗略 可能受到设备系统内存等等影响）\\n调用UIKit相关方法会导致部分类提早初始化\\n主线程执行，完全阻塞式执行\\n如何解决\")]),e._v(\" \"),t(\"p\",[e._v(\"用到了一个技术： attribute used section 更多 请参考： __attribute__详解及应用和 attribute 总结\")]),e._v(\" \"),t(\"p\",[e._v(\"实现原理简述：Clang 提供了很多的编译器函数，它们可以完成不同的功能。其中一种就是 section() 函数，section()函数提供了二进制段的读写能力，它可以将一些编译期就可以确定的常量写入数据段。 在具体的实现中，主要分为编译期和运行时两个部分。在编译期，编译器会将标记了 attribute((section())) 的数据写到指定的数据段中，例如写一个{key(key代表不同的启动阶段), *pointer}对到数据段。到运行时，在合适的时间节点，在根据key读取出函数指针，完成函数的调用。\\n参考案例1 美团 Kylin 管理启动项\")]),e._v(\" \"),t(\"p\",[e._v(\"KLN_STRINGS_EXPORT(“Key”, “Value”)\")]),e._v(\" \"),t(\"p\",[t(\"strong\",[e._v(\"attribute\")]),e._v('((used, section(\"__DATA\" \",\" \"'),t(\"strong\",[e._v(\"kylin\")]),e._v('\"))) static const KLN_DATA __kylin__0 = (KLN_DATA){(KLN_DATA_HEADER){\"Key\", KLN_STRING, KLN_IS_ARRAY}, \"Value\"};')]),e._v(\" \"),t(\"p\",[e._v(\"KLN_FUNCTIONS_EXPORT(STAGE_KEY_A)() { // 在a.m文件中，通过注册宏，把启动项A声明为在STAGE_KEY_A阶段执行\\n// 启动项代码A\\n}\\nKLN_FUNCTIONS_EXPORT(STAGE_KEY_A)() { // 在b.m文件中，把启动项B声明为在STAGE_KEY_A阶段执行\\n// 启动项代码B\\n}\\n在启动流程中，在启动阶段STAGE_KEY_A触发所有注册到STAGE_KEY_A时间节点的启动项，通过对这种方式，几乎没有任何额外的辅助代码，我们用一种很简洁的方式完成了启动项的自注册。\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\\n// 其他逻辑\\n[[KLNKylin sharedInstance] executeArrayForKey:STAGE_KEY_A];  // 在此触发所有注册到STAGE_KEY_A时间节点的启动项\\n// 其他逻辑\\nreturn YES;\\n}\\n更多详情请参考 ：美团外卖iOS App冷启动治理\")])]),e._v(\" \"),t(\"p\",[e._v(\"参考案例2 BeeHive 路由注册： 静态plist，动态注册，annotation\")]),e._v(\" \"),t(\"p\",[e._v(\"首先把数据放在可执行文件的自定义数据段\")]),e._v(\" \"),t(\"p\",[e._v(\"// 通过BeeHiveMod宏进行Annotation标记\")]),e._v(\" \"),t(\"p\",[e._v(\"#ifndef BeehiveModSectName\")]),e._v(\" \"),t(\"p\",[e._v('#define BeehiveModSectName \"BeehiveMods\"')]),e._v(\" \"),t(\"p\",[e._v(\"#endif\")]),e._v(\" \"),t(\"p\",[e._v(\"#ifndef BeehiveServiceSectName\")]),e._v(\" \"),t(\"p\",[e._v('#define BeehiveServiceSectName \"BeehiveServices\"')]),e._v(\" \"),t(\"p\",[e._v(\"#endif\")]),e._v(\" \"),t(\"p\",[e._v('#define BeeHiveDATA(sectname) __attribute((used, section(\"__DATA,\"#sectname\" \")))')]),e._v(\" \"),t(\"p\",[e._v('// 这里我们就把数据存在data数据段里面的\"BeehiveMods\"段中\\n#define BeeHiveMod(name) '),t(\"br\"),e._v('\\nclass BeeHive; char * k##name##_mod BeeHiveDATA(BeehiveMods) = \"\"#name\"\";')]),e._v(\" \"),t(\"p\",[e._v(\"#define BeeHiveService(servicename,impl) \"),t(\"br\"),e._v('\\nclass BeeHive; char * k##servicename##_service BeeHiveDATA(BeehiveServices) = \"{ \"\"#servicename\"\" : \"\"#impl\"\"}\";')]),e._v(\" \"),t(\"p\",[e._v(\"@interface BHAnnotation : NSObject\")]),e._v(\" \"),t(\"p\",[e._v(\"@end\\n从Mach-O section中读取数据\")]),e._v(\" \"),t(\"p\",[e._v(\"NSArray<NSString \"),t(\"em\",[e._v(\">\")]),e._v(\" BHReadConfiguration(char *sectionName,const struct mach_header *mhp);\\nstatic void dyld_callback(const struct mach_header *mhp, intptr_t vmaddr_slide)\\n{\\nNSArray *mods = BHReadConfiguration(BeehiveModSectName, mhp);\\nfor (NSString *modName in mods) {\\nClass cls;\\nif (modName) {\\ncls = NSClassFromString(modName);\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v(\"        if (cls) {\\n            [[BHModuleManager sharedManager] registerDynamicModule:cls];\\n        }\\n    }\\n}\\n\\n//register services\\nNSArray<NSString *> *services = BHReadConfiguration(BeehiveServiceSectName,mhp);\\nfor (NSString *map in services) {\\n    NSData *jsonData =  [map dataUsingEncoding:NSUTF8StringEncoding];\\n    NSError *error = nil;\\n    id json = [NSJSONSerialization JSONObjectWithData:jsonData options:0 error:&error];\\n    if (!error) {\\n        if ([json isKindOfClass:[NSDictionary class]] && [json allKeys].count) {\\n            \\n            NSString *protocol = [json allKeys][0];\\n            NSString *clsName  = [json allValues][0];\\n            \\n            if (protocol && clsName) {\\n                [[BHServiceManager sharedManager] registerService:NSProtocolFromString(protocol) implClass:NSClassFromString(clsName)];\\n            }\\n            \\n        }\\n    }\\n}\\n\")])])]),t(\"p\",[e._v(\"}\\n\"),t(\"strong\",[e._v(\"attribute\")]),e._v(\"((constructor))\\nvoid initProphet() {\\n_dyld_register_func_for_add_image(dyld_callback);\\n}\")]),e._v(\" \"),t(\"p\",[e._v(\"NSArray<NSString \"),t(\"em\",[e._v(\">\")]),e._v(\" BHReadConfiguration(char *sectionName,const struct mach_header *mhp)\\n{\\nNSMutableArray *configs = [NSMutableArray array];\\nunsigned long size = 0;\\n#ifndef \"),t(\"strong\",[e._v(\"LP64\")]),e._v(\"\\nuintptr_t \"),t(\"em\",[e._v(\"memory = (uintptr_t\")]),e._v(\")getsectiondata(mhp, SEG_DATA, sectionName, &size);\\n#else\\nconst struct mach_header_64 *mhp64 = (const struct mach_header_64 *)mhp;\\nuintptr_t \"),t(\"em\",[e._v(\"memory = (uintptr_t\")]),e._v(\")getsectiondata(mhp64, SEG_DATA, sectionName, &size);\\n#endif\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v('unsigned long counter = size/sizeof(void*);\\nfor(int idx = 0; idx < counter; ++idx){\\n    char *string = (char*)memory[idx];\\n    NSString *str = [NSString stringWithUTF8String:string];\\n    if(!str)continue;\\n    \\n    BHLog(@\"config = %@\", str);\\n    if(str) [configs addObject:str];\\n}\\n\\nreturn configs;\\n')])])]),t(\"p\",[e._v(\"}\")]),e._v(\" \"),t(\"p\",[e._v(\"@implementation BHAnnotation\")]),e._v(\" \"),t(\"p\",[e._v(\"@end\\nattribute((constructor))就是保证在main之前读取所有注册信息。\")]),e._v(\" \"),t(\"p\",[e._v(\"使用\")]),e._v(\" \"),t(\"p\",[e._v(\"@BeeHiveMod(ShopModule)\\n@interface ShopModule() \"),t(\"BHModuleProtocol\")],1),e._v(\" \"),t(\"p\",[e._v(\"@end\\n@implementation ShopModule\\n解决方案\")]),e._v(\" \"),t(\"p\",[e._v(\"把+load等main函数之前的代码移植到了main函数之后\")]),e._v(\" \"),t(\"p\",[e._v(\"原理是把函数地址放到DATA段中，然后主程序在启动时获取DATA的内容，并逐个调用。\\n// 设置成宏方便使用\")]),e._v(\" \"),t(\"p\",[e._v(\"typedef void (*AppLaunchFuncCallback)(void);\\ntypedef void (*AppLaunchFuncTemplate)(AppLaunchFuncCallback);\")]),e._v(\" \"),t(\"p\",[e._v('#define K_STRING_DATASectionName \"__strstore\"\\n#define K_FUNCTION_DATASectionName \"__funcstore\"\\n#define K_SegmentName  \"__DATA\"')]),e._v(\" \"),t(\"p\",[e._v('#define K_DATA(sectname) __attribute((used, section(\"__DATA,\"#sectname\" \")))\\n#define K_PYFUNCTION_DATA __attribute((used, section(K_SegmentName \",\" K_FUNCTION_DATASectionName )))')]),e._v(\" \"),t(\"p\",[e._v(\"#define AppLaunchReLoadFunc(functionName)  \"),t(\"br\"),e._v(\"\\nstatic void AppLaunch##functionName(AppLaunchFuncCallback);\"),t(\"br\"),e._v(\"\\nstatic AppLaunchFuncTemplate varLoadable##functionName K_PYFUNCTION_DATA = AppLaunch##functionName;\"),t(\"br\"),e._v(\"\\nstatic void AppLaunch##functionName\\n读取所有注册信息\")]),e._v(\" \"),t(\"p\",[e._v(\"//static int LoadableFunctionCallbackImpl(const char *name){\")]),e._v(\" \"),t(\"p\",[e._v(\"static void LoadableRun(const char * segmentName,const char *sectionName){\\nCFTimeInterval loadStart = CFAbsoluteTimeGetCurrent();\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v(\"Dl_info info;\\nint ret = dladdr(LoadableRun, &info);\\nif(ret == 0){\\n    // fatal error\\n}\\n\")])])]),t(\"p\",[e._v(\"#ifndef \"),t(\"strong\",[e._v(\"LP64\")]),e._v(\"\\nconst struct mach_header \"),t(\"em\",[e._v(\"mhp = (struct mach_header\")]),e._v(\")info.dli_fbase;\\nunsigned long size = 0;\\nuint32_t \"),t(\"em\",[e._v(\"memory = (uint32_t\")]),e._v(\")getsectiondata(mhp, segmentName, sectionName, & size);\\n#else /* defined(\"),t(\"strong\",[e._v(\"LP64\")]),e._v(\") \"),t(\"em\",[e._v(\"/\\nconst struct mach_header_64 \"),t(\"em\",[e._v(\"mhp = (struct mach_header_64\")]),e._v(\")info.dli_fbase;\\nunsigned long size = 0;\\nuint64_t \"),t(\"em\",[e._v(\"memory = (uint64_t\")]),e._v(\")getsectiondata(mhp, segmentName, sectionName, & size);\\n#endif /\")]),e._v(\" defined(\"),t(\"strong\",[e._v(\"LP64\")]),e._v(\") */\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v('CFTimeInterval loadComplete = CFAbsoluteTimeGetCurrent();\\nif(size == 0){\\n    NSLog(@\"QWLoadable:empty\");\\n    return;\\n}\\n\\nfor(int idx = 0; idx < size/sizeof(void*); ++idx){\\n    AppLaunchFuncCallback func = (AppLaunchFuncCallback)memory[idx];\\n    func();\\n}\\n')])])]),t(\"p\",[e._v(\"}\")]),e._v(\" \"),t(\"p\",[e._v(\"@implementation AppLaunchManager\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"(void)run{\\nLoadableRun(K_SegmentName,K_FUNCTION_DATASectionName);\\n}\")])]),e._v(\" \"),t(\"p\",[e._v(\"@end\\n使用\")]),e._v(\" \"),t(\"p\",[e._v(\"@interface ViewController ()\")]),e._v(\" \"),t(\"p\",[e._v(\"@end\")]),e._v(\" \"),t(\"p\",[e._v('@implementation ViewController\\n//+ (void)load {\\n//    NSLog(@\"123456\");\\n//}')]),e._v(\" \"),t(\"p\",[e._v('AppLaunchReLoadFunc(FooObjecttag9012)(){\\nNSLog(@\"123456\");\\n}')]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"(void)viewDidLoad {\\n[super viewDidLoad];\\n// Do any additional setup after\")])]),e._v(\" \"),t(\"p\",[e._v(\"}\\n在main函数之后合适的时机进行调用 比如：RootViewController加载完成的时候\")]),e._v(\" \"),t(\"div\",{staticClass:\"language- extra-class\"},[t(\"pre\",[t(\"code\",[e._v(\"[AppLaunchManager run];\\n\")])])]),t(\"p\",[e._v(\"目前暂时替换 +load路由注册的部分 （80+个） 从DATA段读取函数地址的耗时 几乎可以忽略\")]),e._v(\" \"),t(\"p\",[e._v(\"写到最后\")]),e._v(\" \"),t(\"p\",[e._v(\"启动速度的优化都是毫秒级，这个也是一种优化pre_main耗时的途径。有好的办法也可以一起交流。\")]),e._v(\" \"),t(\"p\",[e._v(\"更多参考链接：\")]),e._v(\" \"),t(\"p\",[e._v(\"https://www.jianshu.com/p/595fe9b1e3dd\")]),e._v(\" \"),t(\"p\",[e._v(\"http://seanchense.github.io/2019/04/13/ios-launch-optimizing-replace-load-method/\")]),e._v(\" \"),t(\"p\",[e._v(\"https://www.jianshu.com/p/d0e614c945bf\")]),e._v(\" \"),t(\"p\",[e._v(\"https://www.jianshu.com/p/33663906f7a2\")]),e._v(\" \"),t(\"p\",[e._v(\"__attribute__详解及应用 https://www.jianshu.com/p/965f6f903114\")]),e._v(\" \"),t(\"p\",[e._v(\"一种延迟 premain code 的方法 https://everettjf.github.io/2017/03/06/a-method-of-delay-premain-code/\")]),e._v(\" \"),t(\"p\",[e._v(\"iOS应用启动性能优化资料 https://everettjf.github.io/2018/08/06/ios-launch-performance-collection/\")]),e._v(\" \"),t(\"p\",[e._v(\"attribute 总结 https://www.jianshu.com/p/29eb7b5c8b2d\")])])}),[],!1,null,null,null);n.default=a.exports}}]);","extractedComments":[]}